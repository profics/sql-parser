#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 336)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    47,  -128,    73,   149,   222,   105,    94,    94,   233,     7,
   132,   133,     8,   171,   234,   128,   224,   142,   225,   226,
    88,    87,    47,   143,   156,   227,   144,    70,    71,    72,
    20,   153,    18,   191,  -128,  -128,  -128,    74,    70,    70,
    21,    22,    50,    51,    68,    35,    48,    39,    41,    42,
    43,    44,    20,    52,    18,    55,    47,    50,    51,   227,
   145,    70,    21,    22,    50,    51,    70,    35,    48,    39,
    41,    42,    43,    44,   148,    52,    98,    55,    63,   137,
    97,   169,    47,   170,    95,    31,    20,   141,    18,    99,
     8,   101,   102,   172,   103,   104,    21,    22,    50,    51,
   173,    35,    48,    39,    41,    42,    43,    44,   174,    52,
    47,    55,    20,    31,    18,   175,   136,   177,   130,    14,
   136,   181,    21,    22,    50,    51,   182,    35,    48,    39,
    41,    42,    43,    44,    63,    52,    47,    55,    63,    31,
    20,   186,    18,   187,     8,   129,   191,   124,   203,   206,
    21,    22,    50,    51,    70,    35,    48,    39,    41,    42,
    43,    44,   136,    52,    47,    55,    20,   227,    18,   209,
   210,   116,    70,    63,    18,   221,    21,    22,    50,    51,
   108,    35,    48,    39,    41,    42,    43,    44,   116,    52,
    47,    55,    89,   227,    20,    86,    18,    85,   229,    84,
  -147,    83,    82,    81,    21,    22,    50,    51,    80,    35,
    48,    39,    41,    42,    43,    44,    79,    52,    47,    55,
    20,   149,    18,    78,     8,   -81,    67,    66,   244,   191,
    21,    22,    50,    51,   245,    35,    48,    39,    41,    42,
    43,    44,   156,    52,    47,    55,   206,    31,    20,   153,
    18,    63,   229,    57,    56,   249,    12,   251,    21,    22,
    50,    51,   191,    35,    48,    39,    41,    42,    43,    44,
    70,    52,    47,    55,    20,    31,    18,    18,   256,    11,
   258,   259,   260,     9,    21,    22,    50,    51,    70,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,   nil,    55,
    47,   nil,    20,   149,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    22,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   156,    52,    47,    55,   nil,    31,
    20,   153,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    22,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,   nil,    52,    47,    55,    20,   149,    18,   nil,
   nil,   nil,     8,   nil,   nil,   nil,    21,    22,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   156,    52,
    47,    55,   nil,    31,    20,   153,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
    20,    31,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    22,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,    98,    52,    47,    55,   nil,    31,   nil,   nil,
    18,   nil,   nil,   nil,   nil,    99,   nil,   101,   102,   nil,
   103,   104,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,    20,   227,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
   nil,   227,    20,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    22,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,    20,   227,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,   nil,   227,    20,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,    20,   227,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    22,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,   227,
    20,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    22,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,   nil,    52,    47,    55,    20,    31,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
    47,    55,   nil,   227,    20,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
    20,   227,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    22,    50,    51,   nil,    35,    48,    39,    41,    42,
    43,    44,   nil,    52,    47,    55,   nil,    31,    20,   nil,
    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,    20,    31,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,    35,
    48,    39,    41,    42,    43,    44,   nil,    52,    47,    55,
   nil,    31,    20,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    22,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,    47,    55,   nil,    31,
    18,   nil,   nil,   nil,   nil,   118,   nil,   nil,   nil,   nil,
    50,    51,   nil,    35,    48,    39,    41,    42,    43,    44,
   nil,    52,    47,    55,   nil,   149,    20,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,    50,    51,
   nil,    35,    48,    39,    41,    42,    43,    44,   nil,    52,
   nil,    55,    20,   153,    18,    47,   nil,   nil,    31,   nil,
   nil,   nil,    21,    22,    50,    51,   nil,    35,    48,    39,
    41,    42,    43,    44,   nil,    52,   nil,    55,   nil,    47,
   nil,   nil,    31,   nil,   nil,    20,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,    47,
    55,    18,   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   nil,    52,   156,    55,    47,   nil,   nil,    31,    20,
   153,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
    22,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   nil,    52,    47,    55,    20,    31,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,    22,    50,    51,   nil,
    35,    48,    39,    41,    42,    43,    44,   nil,    52,    47,
    55,   nil,    31,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    50,    51,   nil,    35,    48,
    39,    41,    42,    43,    44,   nil,    52,    47,    55,   nil,
   149,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    51,   nil,    35,    48,    39,    41,    42,    43,
    44,   156,    52,   nil,    55,   nil,   nil,    20,   153,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    22,    50,
    51,    98,    35,    48,    39,    41,    42,    43,    44,   nil,
    52,   nil,    55,   nil,    99,   nil,   101,   102,   nil,   103,
   104,   215,   216,   192,   193,   nil,   194,   195,   196,   nil,
   nil,   nil,   nil,   197,   198,   199,   200,   201,   202 ]

racc_action_check = [
   108,    23,    25,   108,   189,    59,   130,    57,   196,     0,
    92,    92,     0,   120,   196,    86,   192,   100,   192,   192,
    52,    52,   256,   102,   108,   256,   103,    59,    24,    24,
   108,   108,   108,   189,    23,    23,    23,    25,   130,    57,
   108,   108,   108,   108,    17,   108,   108,   108,   108,   108,
   108,   108,   256,   108,   256,   108,   249,    86,    86,   249,
   104,   105,   256,   256,   256,   256,    17,   256,   256,   256,
   256,   256,   256,   256,   107,   256,    58,   256,    98,    96,
    58,   118,   229,   119,    58,   229,   249,    99,   249,    58,
   229,    58,    58,   121,    58,    58,   249,   249,   249,   249,
   122,   249,   249,   249,   249,   249,   249,   249,   123,   249,
     8,   249,   229,     8,   229,   127,    95,   135,    90,     8,
   137,   138,   229,   229,   229,   229,   139,   229,   229,   229,
   229,   229,   229,   229,   141,   229,   227,   229,   142,   227,
     8,   147,     8,   148,   227,    87,   150,    84,   153,   154,
     8,     8,     8,     8,    78,     8,     8,     8,     8,     8,
     8,     8,   177,     8,   226,     8,   227,   226,   227,   178,
   179,    77,    68,    66,   187,   188,   227,   227,   227,   227,
    65,   227,   227,   227,   227,   227,   227,   227,   190,   227,
   224,   227,    55,   224,   226,    49,   226,    48,   194,    47,
    45,    44,    43,    42,   226,   226,   226,   226,    41,   226,
   226,   226,   226,   226,   226,   226,    39,   226,   215,   226,
   224,   215,   224,    36,   203,    18,    16,    13,   216,   217,
   224,   224,   224,   224,   218,   224,   224,   224,   224,   224,
   224,   224,   215,   224,   210,   224,   223,   210,   215,   215,
   215,    12,   225,    11,     9,   228,     7,   233,   215,   215,
   215,   215,   243,   215,   215,   215,   215,   215,   215,   215,
   244,   215,    97,   215,   210,    97,   210,   245,   246,     5,
   250,   252,   253,     1,   210,   210,   210,   210,   260,   210,
   210,   210,   210,   210,   210,   210,   nil,   210,   nil,   210,
   206,   nil,    97,   206,    97,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    97,    97,    97,    97,   nil,    97,    97,    97,
    97,    97,    97,    97,   206,    97,   136,    97,   nil,   136,
   206,   206,   206,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   206,   206,   206,   206,   nil,   206,   206,   206,   206,   206,
   206,   206,   nil,   206,   149,   206,   136,   149,   136,   nil,
   nil,   nil,   149,   nil,   nil,   nil,   136,   136,   136,   136,
   nil,   136,   136,   136,   136,   136,   136,   136,   149,   136,
    83,   136,   nil,    83,   149,   149,   149,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   149,   149,   149,   149,   nil,   149,
   149,   149,   149,   149,   149,   149,   nil,   149,    26,   149,
    83,    26,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,    83,    83,    83,   nil,    83,    83,    83,    83,    83,
    83,    83,   109,    83,    31,    83,   nil,    31,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   109,   nil,   109,   109,   nil,
   109,   109,   nil,    26,    26,    26,    26,    26,    26,    26,
   nil,    26,   202,    26,    31,   202,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,    31,    31,    31,   nil,    31,
    31,    31,    31,    31,    31,    31,   nil,    31,   201,    31,
   nil,   201,   202,   nil,   202,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   202,   202,   202,   202,   nil,   202,   202,   202,
   202,   202,   202,   202,   nil,   202,   200,   202,   201,   200,
   201,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   201,
   201,   201,   nil,   201,   201,   201,   201,   201,   201,   201,
   nil,   201,   199,   201,   nil,   199,   200,   nil,   200,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   200,   200,   200,   200,
   nil,   200,   200,   200,   200,   200,   200,   200,   nil,   200,
   198,   200,   199,   198,   199,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   199,   199,   199,   199,   nil,   199,   199,   199,
   199,   199,   199,   199,   nil,   199,   197,   199,   nil,   197,
   198,   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   198,   198,   198,   198,   nil,   198,   198,   198,   198,   198,
   198,   198,   nil,   198,    82,   198,   197,    82,   197,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   197,   197,   197,   197,
   nil,   197,   197,   197,   197,   197,   197,   197,   nil,   197,
   195,   197,   nil,   195,    82,   nil,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    82,    82,    82,    82,   nil,    82,
    82,    82,    82,    82,    82,    82,   nil,    82,   193,    82,
   195,   193,   195,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   195,   195,   195,   195,   nil,   195,   195,   195,   195,   195,
   195,   195,   nil,   195,    81,   195,   nil,    81,   193,   nil,
   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   193,   193,
   193,   193,   nil,   193,   193,   193,   193,   193,   193,   193,
   nil,   193,    80,   193,    81,    80,    81,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    81,    81,    81,    81,   nil,    81,
    81,    81,    81,    81,    81,    81,   nil,    81,    72,    81,
   nil,    72,    80,   nil,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,    80,    80,    80,   nil,    80,    80,    80,
    80,    80,    80,    80,   nil,    80,    79,    80,   nil,    79,
    72,   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,   nil,
    72,    72,   nil,    72,    72,    72,    72,    72,    72,    72,
   nil,    72,   156,    72,   nil,   156,    79,   nil,    79,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    79,    79,    79,    79,
   nil,    79,    79,    79,    79,    79,    79,    79,   nil,    79,
   nil,    79,   156,   156,   156,   182,   nil,   nil,   182,   nil,
   nil,   nil,   156,   156,   156,   156,   nil,   156,   156,   156,
   156,   156,   156,   156,   nil,   156,   nil,   156,   nil,    74,
   nil,   nil,    74,   nil,   nil,   182,   nil,   182,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   182,   182,   182,   182,   nil,
   182,   182,   182,   182,   182,   182,   182,   nil,   182,   186,
   182,    74,   186,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    74,    74,   nil,    74,    74,    74,    74,    74,    74,
    74,   nil,    74,   186,    74,    67,   nil,   nil,    67,   186,
   186,   186,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   186,   186,   186,   nil,   186,   186,   186,   186,   186,   186,
   186,   nil,   186,    73,   186,    67,    73,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    67,    67,    67,    67,   nil,
    67,    67,    67,    67,    67,    67,    67,   nil,    67,    71,
    67,   nil,    71,   nil,   nil,    73,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    73,    73,   nil,    73,    73,
    73,    73,    73,    73,    73,   nil,    73,   191,    73,   nil,
   191,    71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,    71,   nil,    71,    71,    71,    71,    71,    71,
    71,   191,    71,   nil,    71,   nil,   nil,   191,   191,   191,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,   191,   191,
   191,   184,   191,   191,   191,   191,   191,   191,   191,   nil,
   191,   nil,   191,   nil,   184,   nil,   184,   184,   nil,   184,
   184,   184,   184,   152,   152,   nil,   152,   152,   152,   nil,
   nil,   nil,   nil,   152,   152,   152,   152,   152,   152 ]

racc_action_pointer = [
    -1,   283,   nil,   nil,   nil,   277,   nil,   245,   105,   254,
   nil,   250,   214,   211,   nil,   nil,   222,    29,   174,   nil,
   nil,   nil,   nil,   -13,   -19,   -12,   403,   nil,   nil,   nil,
   nil,   429,   nil,   nil,   nil,   nil,   172,   nil,   nil,   208,
   nil,   200,   195,   194,   193,   143,   nil,   148,   192,   138,
   nil,   nil,   -38,   nil,   nil,   131,   nil,     2,    72,   -10,
   nil,   nil,   nil,   nil,   nil,   154,   136,   920,   135,   nil,
   nil,   974,   753,   948,   864,   nil,   nil,   162,   117,   781,
   727,   699,   619,   375,   142,   nil,    10,    87,   nil,   nil,
   114,   nil,     4,   nil,   nil,   108,    67,   267,    41,    69,
    -1,   nil,     2,     5,    39,    24,   nil,    47,    -5,   428,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,    74,
     4,    84,    91,    99,   nil,   nil,   nil,   110,   nil,   nil,
     1,   nil,   nil,   nil,   nil,   113,   321,   112,   112,   122,
   nil,    97,   101,   nil,   nil,   nil,   nil,   113,   140,   349,
   108,   nil,  1044,   140,   118,   nil,   807,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   154,   160,   166,
   nil,   nil,   840,   nil,  1047,   nil,   894,   137,   166,    -5,
   179,  1002,   -14,   673,   190,   645,   -21,   591,   565,   537,
   511,   483,   457,   211,   nil,   nil,   295,   nil,   nil,   nil,
   239,   nil,   nil,   nil,   nil,   213,   220,   191,   230,   nil,
   nil,   nil,   nil,   215,   185,   244,   159,   131,   224,    77,
   nil,   nil,   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   224,   233,   240,   247,   nil,   nil,    51,
   271,   nil,   272,   278,   nil,   nil,    17,   nil,   nil,   nil,
   251,   nil,   nil ]

racc_action_default = [
  -159,  -159,    -1,    -2,    -3,    -5,   -16,  -159,  -159,  -159,
    -4,  -159,  -159,   -26,   -27,   -28,   -30,   -33,  -153,  -108,
  -109,  -110,  -111,  -112,  -115,  -118,  -159,  -120,  -121,  -122,
  -123,  -159,  -125,  -126,  -127,  -129,  -159,  -131,  -132,  -159,
  -134,  -159,  -159,  -159,  -159,  -140,  -141,  -145,  -159,  -159,
  -151,  -152,  -159,  -156,  -157,  -159,   263,  -159,  -159,   -38,
   -39,   -41,   -42,   -81,   -25,   -58,  -159,  -159,  -159,   -32,
  -153,  -159,  -159,  -159,  -159,  -119,  -128,  -159,  -159,  -159,
  -159,  -159,  -159,  -159,  -143,  -144,  -159,  -159,  -155,  -158,
    -6,    -8,   -12,   -10,   -11,  -159,  -159,  -159,  -159,  -159,
  -159,   -46,   -48,   -50,   -51,  -159,   -37,   -60,  -159,   -35,
   -29,   -31,  -113,  -114,  -116,  -117,  -124,  -130,  -159,  -159,
  -159,  -159,  -159,  -159,  -142,  -146,  -148,  -159,  -150,  -154,
  -159,    -9,   -13,   -14,   -17,   -23,  -159,  -159,  -159,   -21,
   -43,  -159,  -159,   -47,   -49,   -52,   -36,   -65,  -159,  -159,
   -59,   -67,  -159,  -159,   -84,   -86,  -159,   -89,   -90,   -91,
   -93,   -94,   -95,   -96,   -97,   -98,  -105,  -106,  -107,  -133,
  -135,  -136,  -137,  -138,  -139,  -149,    -7,  -159,  -159,   -75,
   -18,   -19,  -159,   -44,  -159,   -34,  -159,  -159,  -159,  -159,
  -107,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,
  -159,  -159,  -159,  -159,   -40,   -80,  -159,   -88,   -22,   -24,
  -159,   -20,   -45,   -53,   -54,  -159,  -159,   -66,   -61,   -63,
   -64,   -15,   -92,   -85,  -159,  -159,  -159,  -159,  -159,  -159,
   -71,   -72,   -77,  -159,   -79,   -99,  -100,  -101,  -102,  -103,
  -104,   -87,   -74,   -55,  -159,  -159,  -159,   -70,   -76,  -159,
  -159,   -78,  -159,   -57,   -83,   -62,  -159,   -69,   -73,   -56,
  -159,   -68,   -82 ]

racc_goto_table = [
    69,    17,    58,   150,   178,    59,    91,   138,   204,    15,
   230,   134,   185,   220,   228,    13,   232,    76,   235,   236,
   237,   238,   239,   240,    77,   219,   114,   115,   112,   113,
    65,   107,   147,    64,    96,   205,   212,   213,   214,   131,
    93,   247,   106,   252,   189,   246,   253,   248,   218,   204,
     1,   111,    90,   180,    10,     5,   109,   223,   241,    59,
    17,   117,    76,    76,    76,    76,   207,     4,   110,     3,
   257,   220,   119,   120,   121,   122,   123,   261,   242,   176,
   204,   217,     2,   255,   127,    75,   125,   126,   146,   nil,
   139,   140,   211,   208,   nil,   nil,   nil,   250,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   243,   nil,   nil,    93,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,
   nil,   nil,   184,   nil,   183,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   190,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   179,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,   nil,   179,   nil,   nil,   nil,   nil,   254,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   262 ]

racc_goto_check = [
    11,    18,    14,    38,    20,    29,     8,    17,    12,    23,
    48,    15,    28,    43,    46,    21,    46,    60,    46,    46,
    46,    46,    46,    46,    18,    42,    61,    61,    59,    59,
    25,    26,    27,    22,    16,    31,    35,    36,    37,    10,
    11,    48,    11,    39,    38,    46,    40,    46,    41,    12,
     1,    11,     7,    15,     6,     5,    14,    52,    53,    29,
    18,    11,    60,    60,    60,    60,    54,     4,    23,     3,
    46,    43,    18,    18,    18,    18,    18,    46,    20,     8,
    12,    38,     2,    42,    63,    64,    75,    76,    11,   nil,
    18,    29,    17,    15,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,
   nil,   nil,    14,   nil,    29,    29,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,    18,   nil,   nil,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    50,    82,    69,    67,    55,    49,    -5,   -51,   nil,
   -53,   -17,  -145,   nil,   -10,   -84,   -24,   -90,    -7,   nil,
  -132,     7,    20,     1,   nil,    17,   -34,   -75,  -135,    -7,
   nil,  -118,   nil,   nil,   nil,  -148,  -147,  -146,  -105,  -201,
  -198,  -139,  -162,  -174,   nil,   nil,  -179,   nil,  -184,   nil,
   nil,   nil,  -134,  -148,   -90,   nil,   nil,   nil,   nil,   -43,
    -9,   -47,   nil,    -2,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,     1,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   188,   nil,   nil,   nil,    92,
   nil,    37,   151,     6,   nil,   nil,   nil,   nil,   168,   135,
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,    38,
    60,   231,    61,    62,   100,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   167,   161,   152,   162,   nil,   163,
   164,   165,   154,   155,   157,   158,   159,   160,   166,    19,
    23,    24,    25,    26,    27,    28,    30,    32,    33,    34,
    36,    40,    45,    46,    49,   nil,   nil,    53,    54 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 63, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  2, 65, :_reduce_4,
  0, 68, :_reduce_none,
  3, 68, :_reduce_6,
  3, 69, :_reduce_7,
  1, 69, :_reduce_none,
  2, 70, :_reduce_9,
  1, 71, :_reduce_none,
  1, 71, :_reduce_11,
  0, 72, :_reduce_12,
  1, 72, :_reduce_13,
  1, 72, :_reduce_14,
  3, 74, :_reduce_15,
  1, 67, :_reduce_none,
  5, 66, :_reduce_17,
  6, 66, :_reduce_18,
  3, 78, :_reduce_19,
  3, 79, :_reduce_20,
  1, 79, :_reduce_none,
  3, 77, :_reduce_22,
  1, 77, :_reduce_23,
  3, 81, :_reduce_24,
  3, 75, :_reduce_25,
  2, 75, :_reduce_26,
  1, 83, :_reduce_27,
  1, 83, :_reduce_28,
  3, 85, :_reduce_29,
  1, 85, :_reduce_none,
  3, 86, :_reduce_31,
  2, 86, :_reduce_32,
  1, 86, :_reduce_none,
  4, 84, :_reduce_34,
  2, 87, :_reduce_35,
  3, 76, :_reduce_36,
  2, 76, :_reduce_37,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 93, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 94, :_reduce_43,
  4, 94, :_reduce_44,
  5, 95, :_reduce_45,
  1, 96, :_reduce_46,
  2, 96, :_reduce_47,
  1, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 96, :_reduce_50,
  1, 96, :_reduce_51,
  2, 96, :_reduce_52,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 98, :_reduce_55,
  4, 99, :_reduce_56,
  1, 101, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_59,
  0, 89, :_reduce_none,
  3, 89, :_reduce_61,
  3, 103, :_reduce_62,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  0, 90, :_reduce_none,
  2, 90, :_reduce_66,
  1, 106, :_reduce_none,
  6, 107, :_reduce_68,
  5, 107, :_reduce_69,
  4, 109, :_reduce_70,
  3, 109, :_reduce_71,
  1, 110, :_reduce_none,
  3, 110, :_reduce_73,
  3, 82, :_reduce_74,
  1, 82, :_reduce_none,
  4, 111, :_reduce_76,
  3, 111, :_reduce_77,
  4, 112, :_reduce_78,
  3, 112, :_reduce_79,
  2, 113, :_reduce_80,
  1, 91, :_reduce_81,
  3, 102, :_reduce_82,
  1, 102, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_85,
  1, 114, :_reduce_none,
  3, 114, :_reduce_87,
  2, 115, :_reduce_88,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_92,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 119, :_reduce_99,
  3, 119, :_reduce_100,
  3, 119, :_reduce_101,
  3, 119, :_reduce_102,
  3, 119, :_reduce_103,
  3, 119, :_reduce_104,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 120, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_109,
  1, 80, :_reduce_110,
  1, 80, :_reduce_111,
  1, 80, :_reduce_none,
  3, 121, :_reduce_113,
  3, 121, :_reduce_114,
  1, 121, :_reduce_none,
  3, 123, :_reduce_116,
  3, 123, :_reduce_117,
  1, 123, :_reduce_none,
  2, 124, :_reduce_119,
  1, 124, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 126, :_reduce_124,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 130, :_reduce_129,
  3, 105, :_reduce_130,
  1, 105, :_reduce_none,
  1, 132, :_reduce_none,
  4, 128, :_reduce_133,
  1, 128, :_reduce_none,
  4, 133, :_reduce_135,
  4, 133, :_reduce_136,
  4, 133, :_reduce_137,
  4, 133, :_reduce_138,
  4, 133, :_reduce_139,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 134, :_reduce_142,
  2, 134, :_reduce_143,
  2, 134, :_reduce_144,
  1, 134, :_reduce_145,
  3, 135, :_reduce_146,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  2, 138, :_reduce_149,
  1, 138, :_reduce_150,
  1, 125, :_reduce_151,
  1, 125, :_reduce_152,
  1, 73, :_reduce_153,
  3, 122, :_reduce_154,
  2, 122, :_reduce_155,
  1, 122, :_reduce_none,
  1, 139, :_reduce_none,
  2, 140, :_reduce_158 ]

racc_reduce_n = 159

racc_shift_n = 263

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :asterisk => 14,
  :AS => 15,
  :FROM => 16,
  :CROSS => 17,
  :JOIN => 18,
  :INNER => 19,
  :LEFT => 20,
  :OUTER => 21,
  :RIGHT => 22,
  :FULL => 23,
  :ON => 24,
  :USING => 25,
  :WHERE => 26,
  :GROUP => 27,
  :HAVING => 28,
  :NOT => 29,
  :BETWEEN => 30,
  :AND => 31,
  :IN => 32,
  :LIKE => 33,
  :IS => 34,
  :NULL => 35,
  :EXISTS => 36,
  :identifier => 37,
  :OR => 38,
  :equals_operator => 39,
  :not_equals_operator => 40,
  :less_than_operator => 41,
  :greater_than_operator => 42,
  :less_than_or_equals_operator => 43,
  :greater_than_or_equals_operator => 44,
  :TRUE => 45,
  :FALSE => 46,
  :plus_sign => 47,
  :minus_sign => 48,
  :solidus => 49,
  :CURRENT_USER => 50,
  :period => 51,
  :COUNT => 52,
  :AVG => 53,
  :MAX => 54,
  :MIN => 55,
  :SUM => 56,
  :E => 57,
  :quote => 58,
  :character_string_literal => 59,
  :DATE => 60,
  :date_string => 61 }

racc_nt_base = 62

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "TRUE",
  "FALSE",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "value_list",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_23(val, _values, result)
     result = Array(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_82(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Null.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::True.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::False.new 
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_119(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_149(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
